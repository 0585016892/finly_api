const express = require("express");
const router = express.Router();
const db = require("../db");
const { verifyToken, hasPermission } = require("../middleware/auth.middleware");

// üìå L·∫•y t·∫•t c·∫£ roles
router.get(
  "/roles",
  verifyToken,
  hasPermission("view_roles"),
  async (req, res) => {
    try {
      const [roles] = await db.query("SELECT * FROM roles");
      res.json(roles);
    } catch (err) {
      console.error("L·ªói l·∫•y danh s√°ch roles:", err);
      res.status(500).json({ message: "L·ªói server" });
    }
  }
);

// üìå L·∫•y t·∫•t c·∫£ permissions
router.get(
  "/permissions",
  verifyToken,
  hasPermission("view_roles"),
  async (req, res) => {
    try {
      const [permissions] = await db.query("SELECT * FROM permissions");
      res.json(permissions);
    } catch (err) {
      console.error("L·ªói l·∫•y danh s√°ch permissions:", err);
      res.status(500).json({ message: "L·ªói server" });
    }
  }
);

// üìå T·∫°o role m·ªõi v√† g√°n quy·ªÅn
router.post(
  "/roles",
  verifyToken,
  hasPermission("edit_users"),
  async (req, res) => {
    const { name, permissions } = req.body;

    try {
      const [result] = await db.query("INSERT INTO roles (name) VALUES (?)", [
        name,
      ]);
      const roleId = result.insertId;

      if (Array.isArray(permissions) && permissions.length > 0) {
        const values = permissions.map((p) => [roleId, p]);
        await db.query(
          "INSERT INTO role_permissions (role_id, permission_id) VALUES ?",
          [values]
        );
      }

      res.json({ message: "T·∫°o vai tr√≤ th√†nh c√¥ng" });
    } catch (err) {
      console.error("L·ªói t·∫°o vai tr√≤:", err);
      res.status(500).json({ message: "L·ªói server" });
    }
  }
);

// üìå C·∫≠p nh·∫≠t role + quy·ªÅn
router.put(
  "/roles/:id",
  verifyToken,
  hasPermission("edit_users"),
  async (req, res) => {
    const { name, permissions } = req.body;
    const roleId = req.params.id;

    try {
      // C·∫≠p nh·∫≠t t√™n role
      await db.query("UPDATE roles SET name = ? WHERE id = ?", [name, roleId]);

      // Xo√° t·∫•t c·∫£ quy·ªÅn c≈©
      await db.query("DELETE FROM role_permissions WHERE role_id = ?", [
        roleId,
      ]);

      // G√°n l·∫°i quy·ªÅn m·ªõi
      if (Array.isArray(permissions) && permissions.length > 0) {
        const values = permissions.map((p) => [roleId, p]);
        await db.query(
          "INSERT INTO role_permissions (role_id, permission_id) VALUES ?",
          [values]
        );
      }

      res.json({ message: "C·∫≠p nh·∫≠t vai tr√≤ th√†nh c√¥ng" });
    } catch (err) {
      console.error("L·ªói c·∫≠p nh·∫≠t vai tr√≤:", err);
      res.status(500).json({ message: "L·ªói server" });
    }
  }
);

module.exports = router;
