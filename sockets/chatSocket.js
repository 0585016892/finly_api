const db = require("../db");

// onlineUsers: userId -> Set of socketIds (h·ªó tr·ª£ nhi·ªÅu k·∫øt n·ªëi c√πng user)
const onlineUsers = new Map();

function chatSocket(io) {
  io.on("connection", (socket) => {
    console.log("üîå Client connected:", socket.id);

    // ƒêƒÉng k√Ω user
    socket.on("register", (userId) => {
      if (!userId) return;
      if (!onlineUsers.has(userId)) {
        onlineUsers.set(userId, new Set());
      }
      onlineUsers.get(userId).add(socket.id);

      console.log(`‚úÖ ID ${userId} ƒëƒÉng v·ªõi socket ${socket.id}`);

      // G·ª≠i c·∫≠p nh·∫≠t danh s√°ch user online cho t·∫•t c·∫£ client
      io.emit("update_online_users", Array.from(onlineUsers.keys()));
    });

    // Nh·∫≠n tin nh·∫Øn ri√™ng
    socket.on("send_private_message", (data, callback) => {
      // Log d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c
      console.log("Tin nh·∫Øn t·ª´ client:", data);
      const { sender, receiver, content } = data;
      if (!sender || !receiver || !content) {
        callback && callback({ success: false, error: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá" });
        return;
      }
      const timestamp = new Date();

      // L∆∞u tin nh·∫Øn v√†o DB
      const sql =
        "INSERT INTO chat_messages (sender, receiver, content, created_at) VALUES (?, ?, ?, ?)";
      db.query(sql, [sender, receiver, content, timestamp], (err, results) => {
        if (err) {
          console.error("‚ùå L·ªói l∆∞u tin nh·∫Øn:", err);
          callback && callback({ success: false, error: "L·ªói l∆∞u tin nh·∫Øn" });
          return;
        }

        console.log("‚úÖ Tin nh·∫Øn ƒë√£ l∆∞u v√†o DB");

        // Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i l·∫°i (c·∫≠p nh·∫≠t timestamp ch√≠nh x√°c)
        const messageData = {
          sender,
          receiver,
          content,
          timestamp: timestamp.getTime(),
        };

        // G·ª≠i tin nh·∫Øn cho t·∫•t c·∫£ socket c·ªßa receiver
        const receiverSockets = onlineUsers.get(receiver);
        if (receiverSockets) {
          receiverSockets.forEach((sockId) => {
            io.to(sockId).emit("receive_private_message", messageData);
          });
        }
        // G·ª≠i tin nh·∫Øn cho t·∫•t c·∫£ socket c·ªßa sender (tr·ª´ socket hi·ªán t·∫°i)
        const senderSockets = onlineUsers.get(sender);
        if (senderSockets) {
          senderSockets.forEach((sockId) => {
            if (sockId !== socket.id) {
              io.to(sockId).emit("receive_private_message", messageData);
            }
          });
        }
        // G·ª≠i l·∫°i tin nh·∫Øn cho ch√≠nh ng∆∞·ªùi g·ª≠i qua socket hi·ªán t·∫°i
        socket.emit("receive_private_message", messageData);

        callback && callback({ success: true });
      });
    });

    // X·ª≠ l√Ω disconnect socket
    socket.on("disconnect", () => {
      // T√¨m userId t∆∞∆°ng ·ª©ng socket
      for (const [userId, sockets] of onlineUsers.entries()) {
        if (sockets.has(socket.id)) {
          sockets.delete(socket.id);
          console.log(
            `‚ùå Socket ${socket.id} c·ªßa User ${userId} ƒë√£ disconnect`
          );

          // N·∫øu kh√¥ng c√≤n socket n√†o c·ªßa user, x√≥a user kh·ªèi danh s√°ch online
          if (sockets.size === 0) {
            onlineUsers.delete(userId);
            console.log(`‚ùå User ${userId} ƒë√£ offline`);
          }

          // C·∫≠p nh·∫≠t danh s√°ch online user cho t·∫•t c·∫£ client
          io.emit("update_online_users", Array.from(onlineUsers.keys()));
          break;
        }
      }
    });
  });
}

module.exports = chatSocket;
